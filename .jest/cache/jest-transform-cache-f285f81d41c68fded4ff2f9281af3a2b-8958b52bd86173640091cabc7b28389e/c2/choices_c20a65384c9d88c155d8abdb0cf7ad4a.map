{"version":3,"sources":["choices.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,8B;AACA,kD;AAEA;AAEA;AACA,+C;AAeA,IAAA,UAAA,aAAA,UAAA,MAAA,EAAA;AAAqC,cAAA,OAAA,EAAA,MAAA;AACnC,aAAA,OAAA,CAAY,KAAZ,EAAwB;AAAxB,YAAA,QACE,OAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,IADd;AAEE,cAAK,KAAL,GAAa;AACX,2BAAe,IAAI,sBAAS,KAAb,CAAmB,CAAnB,CADJ,EAAb;;;AAGD;AAED,YAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AAAA,YAAA,QAAA,IAAA;AACQ,YAAA,KAAA,KAAA,KAAA,CACJ,OAAA,GAAA,IADI,CAEJ,QAAA,GAAA,KAFI,CAGJ,cAAA,GAAA,WAHI;AAMN,YAAM,SAAS,UAAC,KAAD,EAAgB,OAAhB,EAAkC,GAAlC,EAA6C;AAC1D,mBAAO,gBAAA,aAAA,CAAC,MAAD,EAAO,EACZ,KAAK,GADO,EAEZ,OAAO,eAAO,IAFF,EAGZ,eAAe,eAAO,OAHV,EAIZ,SAAS,YAAA,CAAM,OAAA,MAAK,KAAL,CAAW,OAAX,CAAmB,EAAE,OAAO,KAAT,EAAgB,SAAS,OAAzB,EAAnB,EAAA,KAAA,CAAA,CAA6D,CAJhE,EAAP;AAKL,4BAAA,aAAA,CAAC,aAAD,EAAc,IAAd;AACE,4BAAA,aAAA,CAAC,IAAD,EAAK,IAAL,EACG,MAAM,WAAN,EADH,CADF,CALK,CAAP;AAWD,SAZD;AAcA,YAAM,UAAU,oBAAM,KAAK,KAAL,CAAW,IAAX,CAAgB,KAAhB,CAAN,EAA8B,CAA9B;AACb,WADa,CACT,UAAC,KAAD,EAAQ,CAAR,EAAS,CAAK,OAAA,gBAAA,aAAA,CAAC,SAAD,EAAU,EAC3B,KAAK,CADsB,EAAV,EAEhB,MAAM,GAAN,CAAU,UAAC,CAAD,EAAI,CAAJ,EAAK,CAAK,OAAA,OAAO,EAAE,KAAT,EAA0B,EAAE,OAA5B,EAAA,CAAA,CAAA,CAFJ,CAEhB,CAFgB,CAAA,CAGP,CAJE,CAAhB;AAMA,eACE,gBAAA,aAAA,CAAC,aAAD,EAAc,IAAd,EACG,CAAC,WAAD,IAAgB,OADnB,CADF;AAKD,KAhCD;AAiCF,WAAA,OAAA;AAAC,CAzCD,CAAqC,gBAAM,SAA3C,CAAA,C;;AA4CA,IAAM,gBAAgB,iBAAO,IAAP,CAAW,qBAAA,mBAAA,qBAAA,CAAA,gBAAA,CAAA,EAAA,CAAA,gBAAA,CAAA,CAAA,CAAX,CAAtB;AAIA,IAAM,YAAY,iBAAO,IAAP,CAAW,qBAAA,mBAAA,qBAAA,CAAA,4BAAA,CAAA,EAAA,CAAA,4BAAA,CAAA,CAAA,CAAX,CAAlB;AAQA,IAAM,SAAS,iBAAO,kBAAP,CAAyB,qBAAA,mBAAA,qBAAA,CAAA,2IAAA,EAAA,2BAAA,CAAA,EAAA,CAAA,2IAAA,EAOS,2BAPT,CAAA,CAAA,CAAzB,EAOO,UAAC,CAAD,EAAe,CAAK,OAAA,EAAA,KAAA,CAAO,CAPlC,CAAf;AAWA,IAAM,gBAAgB,iBAAO,IAAP,CAAW,qBAAA,mBAAA,qBAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAAA,CAAX,CAAtB;AAGA,IAAM,OAAO,iBAAO,IAAP,CAAW,qBAAA,mBAAA,qBAAA,CAAA,mFAAA,CAAA,EAAA,CAAA,mFAAA,CAAA,CAAA,CAAX,CAAb","sourcesContent":["import React from 'react'\nimport styled from \"styled-components/native\"\nimport _ from \"underscore\"\nimport { Animated } from \"react-native\"\n\nimport { colors, lighten10l } from '../../../lib/colors'\nimport { chunk } from '../../../lib/helpers'\nimport { UserAnswer } from './answer'\n\nexport interface Props {\n  ref: React.RefObject<Choices>,\n  data: any[],\n  guessed: (userAnswer: UserAnswer, layer: number) => void,\n  layer: number,\n  isInterlude: boolean\n}\n\ninterface State {\n  hintAnimation: Animated.Value\n}\n\nexport default class Choices extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      hintAnimation: new Animated.Value(0)\n    }\n  }  \n\n  render() {\n    const {\n      data,\n      layer,\n      isInterlude\n    } = this.props\n\n    const choice = (value: string, correct: boolean, idx: number) => {\n      return <Button\n        key={idx}\n        color={colors.blue}\n        underlayColor={colors.blue10l}\n        onPress={() => this.props.guessed({ value: value, correct: correct }, layer)}>\n        <TextContainer>\n          <Text>\n            {value.toUpperCase()}\n          </Text>\n        </TextContainer>\n      </Button>\n    }\n\n    const choices = chunk(this.props.data[layer], 2)\n      .map((group, i) => <SplitView \n        key={i}>\n        {group.map((d, i) => choice(d.value as string, d.correct as boolean, i))}\n      </SplitView>)\n\n    return (\n      <ContainerView>\n        {!isInterlude && choices}\n      </ContainerView>\n    )\n  }\n}\n\n\nconst ContainerView = styled.View`\n  flex: 3;\n`;\n\nconst SplitView = styled.View`\n  flex-direction: row;\n`;\n\ninterface ButtonProps {\n  color: string\n}\n\nconst Button = styled.TouchableHighlight`\n  margin: 10px;\n  padding: 10px;\n  height: 50px;\n  flex: 1\n  align-items: center;\n  justify-content: center;\n  background-color: ${(p: ButtonProps) => p.color};\n  border-radius: 10;\n`;\n\nconst TextContainer = styled.View`\n`;\n\nconst Text = styled.Text`\n  color: white;\n  text-align: center;\n  font-family: BrandonGrotesque-Bold;\n`;\n"],"sourceRoot":""}