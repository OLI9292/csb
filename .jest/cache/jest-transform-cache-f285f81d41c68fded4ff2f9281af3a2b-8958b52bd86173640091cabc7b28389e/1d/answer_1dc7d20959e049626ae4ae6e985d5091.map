{"version":3,"sources":["answer.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,8B;AACA,kD;AACA,6C;AAiBA,IAAA,SAAA,aAAA,UAAA,MAAA,EAAA;AAAoC,cAAA,MAAA,EAAA,MAAA;AAClC,aAAA,MAAA,CAAY,KAAZ,EAAwB;AAAxB,YAAA,QACE,OAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,IADd;AAEE,cAAK,KAAL,GAAa,EAAb;;AACD;AAED,WAAA,SAAA,CAAA,yBAAA,GAAA,UAA0B,SAA1B,EAA0C;AACzC,KADD;AAGA,WAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACQ,YAAA,KAAA,KAAA,KAAA,CACJ,UAAA,GAAA,OADI,CAEJ,cAAA,GAAA,WAFI,CAGJ,QAAA,GAAA,KAHI,CAIJ,eAAA,GAAA,YAJI;AAON,YAAM,cAAc,UAAC,KAAD,EAAgB,OAAhB,EAAkC,OAAlC,EAAkD,CAAK,OAAA,gBAAA,aAAA,CAAC,WAAD,EAAY,EACrF,KAAK,KADgF,EAAZ;AAEzE,4BAAA,aAAA,CAAC,IAAD,EAAK,EACH,SAAS,OADN,EAAL,EAEG,MAAM,WAAN,EAFH,CAFyE;AAMzE,4BAAA,aAAA,CAAC,SAAD,EAAU,EACR,cAAc,YADN,EAER,SAAS,OAFD,EAGR,SATuE,OAM/D,EAAV,CANyE,CAAA,CAU7D,CAVd;AAYA,YAAM,SAAS;AACZ,WADY,CACR,UAAA,CAAA,EAAC,CAAI,OAAA,YAAY,EAAE,KAAd,EAAqB,EAAE,OAAvB,EAAA,KAAA,CAAA,CAAsC,CADnC,CAAf;AAGA,YAAM,WAAW,QAAQ,KAAR,CAAc,OAAO,MAArB;AACd,WADc,CACV,UAAA,KAAA,EAAK;AACR,gBAAM,QAAQ,MAAM,MAAN,CAAa,UAAA,CAAA,EAAC,CAAI,OAAA,EAAA,OAAA,CAAS,CAA3B,EAA6B,CAA7B,EAAgC,KAA9C;AACA,mBAAO,YAAY,KAAZ,EAAmB,IAAnB,EAAyB,IAAzB,CAAP;AACD,SAJc,CAAjB;AAMA,eACE,gBAAA,aAAA,CAAC,aAAD,EAAc,IAAd,EACG,OAAO,MAAP,CAAc,QAAd,CADH,CADF;AAKD,KAlCD;AAmCF,WAAA,MAAA;AAAC,CA5CD,CAAoC,gBAAM,SAA1C,CAAA,C;;AA8CA,IAAM,cAAc,iBAAO,IAAP,CAAW,qBAAA,mBAAA,qBAAA,CAAA,yBAAA,CAAA,EAAA,CAAA,yBAAA,CAAA,CAAA,CAAX,CAApB;AAIA,IAAM,gBAAgB,iBAAO,IAAP,CAAW,qBAAA,mBAAA,qBAAA,CAAA,4FAAA,CAAA,EAAA,CAAA,4FAAA,CAAA,CAAA,CAAX,CAAtB;AAaA,IAAM,OAAO,iBAAO,IAAP,CAAW,qBAAA,mBAAA,qBAAA,CAAA,wEAAA,EAAA,KAAA,CAAA,EAAA,CAAA,wEAAA,EAG2B,KAH3B,CAAA,CAAA,CAAX,EAGA,UAAC,CAAD,EAAgB,CAAK,OAAA,EAAE,OAAF,GAAY,CAAZ,GAAA,CAAA,CAAiB,CAHtC,CAAb;AAMA,IAAM,YAAY,iBAAO,IAAP,CAAW,qBAAA,mBAAA,qBAAA,CAAA,wBAAA,EAAA,iEAAA,CAAA,EAAA,CAAA,wBAAA;AAGhB,iEAHgB,CAAA,CAAA,CAAX,EACI,UAAC,CAAD,EAAgB,CAAK,OAAA,EAAE,YAAF;AACpC,MAAE,OAAF,GAAY,eAAO,KAAnB,GAA2B,eAAO,GADE;AAAA,WAAA,CAE9B,CAHK,CAAlB","sourcesContent":["import React from 'react'\nimport styled from \"styled-components/native\"\nimport { colors, lighten10l } from '../../../lib/colors'\nimport { validate } from '../../Onboarding/SignUp/validators';\n\nexport interface UserAnswer {\n  correct: boolean,\n  value: string\n}\n\nexport interface Props {\n  userAnswers: UserAnswer[],\n  choices: any[][],\n  layer: number,\n  isCorrecting: boolean\n}\n\ninterface State {}\n\nexport default class Answer extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {}\n  }\n\n  componentWillReceiveProps(nextProps: Props) {    \n  }\n    \n  render() {\n    const {\n      choices,\n      userAnswers,\n      layer,\n      isCorrecting\n    } = this.props\n\n    const answerSpace = (value: string, correct: boolean, missing: boolean) => <AnswerSpace \n      key={value}>\n      <Text\n        missing={missing}>\n        {value.toUpperCase()}\n      </Text>\n      <Underline\n        isCorrecting={isCorrecting}\n        correct={correct}\n        missing={missing} />\n    </AnswerSpace>\n    \n    const filled = userAnswers\n      .map(a => answerSpace(a.value, a.correct, false))\n\n    const unfilled = choices.slice(filled.length)\n      .map(layer => {\n        const value = layer.filter(c => c.correct)[0].value as string\n        return answerSpace(value, true, true)\n      })\n\n    return (\n      <ContainerView>\n        {filled.concat(unfilled)}    \n      </ContainerView>\n    )\n  }\n}\n\nconst AnswerSpace = styled.View`\n  margin: 0px 10px;\n`\n\nconst ContainerView = styled.View`\n  flex: 1;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`\n\ninterface MissingProps {\n  missing: boolean,\n  correct?: boolean,\n  isCorrecting?: boolean\n}\n\nconst Text = styled.Text`\n  font-size: 24;\n  font-family: BrandonGrotesque-Bold;\n  opacity: ${(p: MissingProps) => p.missing ? 0 : 1};\n`\n\nconst Underline = styled.View`\n  background-color: ${(p: MissingProps) => p.isCorrecting \n    ?  p.correct ? colors.green : colors.red\n    : \"black\"};\n  height: 4px;\n  border-radius: 2px;\n  margin: 0px -2px;\n`\n"],"sourceRoot":""}