edf04078dc4df0d267e76afbb42f9ba6
'use strict';require('ts-jest').install("/Users/oliver/Developer/csb/src/Components/Game/Question/index.tsx", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport React from 'react';\nimport { Animated } from \"react-native\";\nimport Prompt from './prompt';\nimport Answer from './answer';\nimport Choices from './choices';\nimport _ from \"underscore\";\nvar Question = /** @class */ (function (_super) {\n    __extends(Question, _super);\n    function Question(props) {\n        var _this = _super.call(this, props) || this;\n        _this.state = {\n            isCorrecting: false,\n            layer: 0,\n            userAnswers: [],\n            opacityAnimation: new Animated.Value(1)\n        };\n        _this.promptComponent = React.createRef();\n        _this.choicesComponent = React.createRef();\n        return _this;\n    }\n    Question.prototype.componentDidMount = function () {\n        this.reset(this.props.question);\n    };\n    Question.prototype.componentWillReceiveProps = function (nextProps) {\n        var _this = this;\n        if (nextProps.question && this.props.question !== nextProps.question) {\n            Animated.timing(this.state.opacityAnimation, { toValue: 0, duration: 500 }).start();\n            this.nextQuestionTimeout = setTimeout(function () {\n                _this.reset(nextProps.question);\n                Animated.timing(_this.state.opacityAnimation, { toValue: 1, duration: 500 }).start();\n            }, 500);\n        }\n    };\n    Question.prototype.reset = function (question) {\n        this.setState({\n            question: question,\n            layer: 0,\n            isCorrecting: false,\n            userAnswers: []\n        });\n    };\n    Question.prototype.guessed = function (userAnwer, layer) {\n        var _a = this.state, userAnswers = _a.userAnswers, question = _a.question, isCorrecting = _a.isCorrecting;\n        userAnswers[layer] = userAnwer;\n        this.setState({ userAnswers: userAnswers });\n        layer = layer + 1;\n        isCorrecting = isCorrecting || layer === question.choices.length;\n        if (isCorrecting) {\n            this.setState({ isCorrecting: isCorrecting });\n        }\n        var done = _.every(userAnswers, function (a) { return a.correct; }) &&\n            userAnswers.length === question.choices.length;\n        if (done) {\n            this.props.questionDone();\n        }\n        else {\n            if (isCorrecting) {\n                var incorrectLayer = _.findIndex(userAnswers, function (u) { return !u.correct; });\n                if (incorrectLayer > -1) {\n                    this.setState({ layer: incorrectLayer });\n                }\n            }\n            else {\n                this.setState({ layer: layer });\n            }\n        }\n    };\n    Question.prototype.render = function () {\n        if (!this.state.question) {\n            return null;\n        }\n        var _a = this.state, layer = _a.layer, userAnswers = _a.userAnswers, question = _a.question, isCorrecting = _a.isCorrecting;\n        return (React.createElement(Animated.View, { style: [{ opacity: this.state.opacityAnimation, flex: 8, alignSelf: \"stretch\" }] },\n            React.createElement(Prompt, { ref: this.promptComponent, prompt: question.prompt, secondaryPrompt: question.secondaryPrompt }),\n            React.createElement(Answer, { isCorrecting: isCorrecting, layer: layer, choices: question.choices, userAnswers: userAnswers }),\n            React.createElement(Choices, { isInterlude: this.props.isInterlude, ref: this.choicesComponent, layer: layer, data: question.choices, guessed: this.guessed.bind(this) })));\n    };\n    return Question;\n}(React.Component));\nexport default Question;\n//# sourceMappingURL=data:application/json;base64,");'use strict';Object.defineProperty(exports, "__esModule", { value: true });









var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _reactNative = require('react-native');
var _prompt = require('./prompt');var _prompt2 = _interopRequireDefault(_prompt);
var _answer = require('./answer');var _answer2 = _interopRequireDefault(_answer);
var _choices = require('./choices');var _choices2 = _interopRequireDefault(_choices);
var _underscore = require('underscore');var _underscore2 = _interopRequireDefault(_underscore);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var __extends = undefined && undefined.__extends || function () {var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {d.__proto__ = b;} || function (d, b) {for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];};return function (d, b) {extendStatics(d, b);function __() {this.constructor = d;}d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());};}();
var Question = /** @class */function (_super) {
    __extends(Question, _super);
    function Question(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            isCorrecting: false,
            layer: 0,
            userAnswers: [],
            opacityAnimation: new _reactNative.Animated.Value(1) };

        _this.promptComponent = _react2.default.createRef();
        _this.choicesComponent = _react2.default.createRef();
        return _this;
    }
    Question.prototype.componentDidMount = function () {
        this.reset(this.props.question);
    };
    Question.prototype.componentWillReceiveProps = function (nextProps) {
        var _this = this;
        if (nextProps.question && this.props.question !== nextProps.question) {
            _reactNative.Animated.timing(this.state.opacityAnimation, { toValue: 0, duration: 500 }).start();
            this.nextQuestionTimeout = setTimeout(function () {
                _this.reset(nextProps.question);
                _reactNative.Animated.timing(_this.state.opacityAnimation, { toValue: 1, duration: 500 }).start();
            }, 500);
        }
    };
    Question.prototype.reset = function (question) {
        this.setState({
            question: question,
            layer: 0,
            isCorrecting: false,
            userAnswers: [] });

    };
    Question.prototype.guessed = function (userAnwer, layer) {
        var _a = this.state,userAnswers = _a.userAnswers,question = _a.question,isCorrecting = _a.isCorrecting;
        userAnswers[layer] = userAnwer;
        this.setState({ userAnswers: userAnswers });
        layer = layer + 1;
        isCorrecting = isCorrecting || layer === question.choices.length;
        if (isCorrecting) {
            this.setState({ isCorrecting: isCorrecting });
        }
        var done = _underscore2.default.every(userAnswers, function (a) {return a.correct;}) &&
        userAnswers.length === question.choices.length;
        if (done) {
            this.props.questionDone();
        } else
        {
            if (isCorrecting) {
                var incorrectLayer = _underscore2.default.findIndex(userAnswers, function (u) {return !u.correct;});
                if (incorrectLayer > -1) {
                    this.setState({ layer: incorrectLayer });
                }
            } else
            {
                this.setState({ layer: layer });
            }
        }
    };
    Question.prototype.render = function () {
        if (!this.state.question) {
            return null;
        }
        var _a = this.state,layer = _a.layer,userAnswers = _a.userAnswers,question = _a.question,isCorrecting = _a.isCorrecting;
        return _react2.default.createElement(_reactNative.Animated.View, { style: [{ opacity: this.state.opacityAnimation, flex: 8, alignSelf: "stretch" }] },
        _react2.default.createElement(_prompt2.default, { ref: this.promptComponent, prompt: question.prompt, secondaryPrompt: question.secondaryPrompt }),
        _react2.default.createElement(_answer2.default, { isCorrecting: isCorrecting, layer: layer, choices: question.choices, userAnswers: userAnswers }),
        _react2.default.createElement(_choices2.default, { isInterlude: this.props.isInterlude, ref: this.choicesComponent, layer: layer, data: question.choices, guessed: this.guessed.bind(this) }));
    };
    return Question;
}(_react2.default.Component);exports.default =
Question;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,