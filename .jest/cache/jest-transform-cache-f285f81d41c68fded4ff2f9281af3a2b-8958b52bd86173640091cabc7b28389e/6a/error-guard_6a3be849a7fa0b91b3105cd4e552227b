c902e0e838d599e6ba66e973f7311b99
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @providesModule error-guard
 * @polyfill
 * @nolint
 */
let _inGuard = 0;
/**
 * This is the error handler that is called when we encounter an exception
 * when loading a module. This will report any errors encountered before
 * ExceptionsManager is configured.
 */

let _globalHandler = function onError(e) {
  throw e;
};
/**
 * The particular require runtime that we are using looks for a global
 * `ErrorUtils` object and if it exists, then it requires modules with the
 * error handler specified via ErrorUtils.setGlobalHandler by calling the
 * require function with applyWithGuard. Since the require module is loaded
 * before any of the modules, this ErrorUtils must be defined (and the handler
 * set) globally before requiring anything.
 */


const ErrorUtils = {
  setGlobalHandler(fun) {
    _globalHandler = fun;
  },

  getGlobalHandler() {
    return _globalHandler;
  },

  reportError(error) {
    _globalHandler && _globalHandler(error);
  },

  reportFatalError(error) {
    _globalHandler && _globalHandler(error, true);
  },

  applyWithGuard(fun, context, args) {
    try {
      _inGuard++;
      return fun.apply(context, args);
    } catch (e) {
      ErrorUtils.reportError(e);
    } finally {
      _inGuard--;
    }

    return null;
  },

  applyWithGuardIfNeeded(fun, context, args) {
    if (ErrorUtils.inGuard()) {
      return fun.apply(context, args);
    } else {
      ErrorUtils.applyWithGuard(fun, context, args);
    }

    return null;
  },

  inGuard() {
    return _inGuard;
  },

  guard(fun, name, context) {
    if (typeof fun !== 'function') {
      console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
      return null;
    }

    name = name || fun.name || '<generated guard>';

    function guarded() {
      return ErrorUtils.applyWithGuard(fun, context || this, arguments, null, name);
    }

    return guarded;
  }

};
global.ErrorUtils = ErrorUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVycm9yLWd1YXJkLmpzIl0sIm5hbWVzIjpbIl9pbkd1YXJkIiwiX2dsb2JhbEhhbmRsZXIiLCJvbkVycm9yIiwiZSIsIkVycm9yVXRpbHMiLCJzZXRHbG9iYWxIYW5kbGVyIiwiZnVuIiwiZ2V0R2xvYmFsSGFuZGxlciIsInJlcG9ydEVycm9yIiwiZXJyb3IiLCJyZXBvcnRGYXRhbEVycm9yIiwiYXBwbHlXaXRoR3VhcmQiLCJjb250ZXh0IiwiYXJncyIsImFwcGx5IiwiYXBwbHlXaXRoR3VhcmRJZk5lZWRlZCIsImluR3VhcmQiLCJndWFyZCIsIm5hbWUiLCJjb25zb2xlIiwid2FybiIsImd1YXJkZWQiLCJhcmd1bWVudHMiLCJnbG9iYWwiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBV0EsSUFBSUEsV0FBVyxDQUFmO0FBRUE7Ozs7OztBQUtBLElBQUlDLGlCQUFpQixTQUFTQyxPQUFULENBQWlCQyxDQUFqQixFQUFvQjtBQUN2QyxRQUFNQSxDQUFOO0FBQ0QsQ0FGRDtBQUlBOzs7Ozs7Ozs7O0FBUUEsTUFBTUMsYUFBYTtBQUNqQkMsbUJBQWlCQyxHQUFqQixFQUFzQjtBQUNwQkwscUJBQWlCSyxHQUFqQjtBQUNELEdBSGdCOztBQUlqQkMscUJBQW1CO0FBQ2pCLFdBQU9OLGNBQVA7QUFDRCxHQU5nQjs7QUFPakJPLGNBQVlDLEtBQVosRUFBbUI7QUFDakJSLHNCQUFrQkEsZUFBZVEsS0FBZixDQUFsQjtBQUNELEdBVGdCOztBQVVqQkMsbUJBQWlCRCxLQUFqQixFQUF3QjtBQUN0QlIsc0JBQWtCQSxlQUFlUSxLQUFmLEVBQXNCLElBQXRCLENBQWxCO0FBQ0QsR0FaZ0I7O0FBYWpCRSxpQkFBZUwsR0FBZixFQUFvQk0sT0FBcEIsRUFBNkJDLElBQTdCLEVBQW1DO0FBQ2pDLFFBQUk7QUFDRmI7QUFDQSxhQUFPTSxJQUFJUSxLQUFKLENBQVVGLE9BQVYsRUFBbUJDLElBQW5CLENBQVA7QUFDRCxLQUhELENBR0UsT0FBT1YsQ0FBUCxFQUFVO0FBQ1ZDLGlCQUFXSSxXQUFYLENBQXVCTCxDQUF2QjtBQUNELEtBTEQsU0FLVTtBQUNSSDtBQUNEOztBQUNELFdBQU8sSUFBUDtBQUNELEdBdkJnQjs7QUF3QmpCZSx5QkFBdUJULEdBQXZCLEVBQTRCTSxPQUE1QixFQUFxQ0MsSUFBckMsRUFBMkM7QUFDekMsUUFBSVQsV0FBV1ksT0FBWCxFQUFKLEVBQTBCO0FBQ3hCLGFBQU9WLElBQUlRLEtBQUosQ0FBVUYsT0FBVixFQUFtQkMsSUFBbkIsQ0FBUDtBQUNELEtBRkQsTUFFTztBQUNMVCxpQkFBV08sY0FBWCxDQUEwQkwsR0FBMUIsRUFBK0JNLE9BQS9CLEVBQXdDQyxJQUF4QztBQUNEOztBQUNELFdBQU8sSUFBUDtBQUNELEdBL0JnQjs7QUFnQ2pCRyxZQUFVO0FBQ1IsV0FBT2hCLFFBQVA7QUFDRCxHQWxDZ0I7O0FBbUNqQmlCLFFBQU1YLEdBQU4sRUFBV1ksSUFBWCxFQUFpQk4sT0FBakIsRUFBMEI7QUFDeEIsUUFBSSxPQUFPTixHQUFQLEtBQWUsVUFBbkIsRUFBK0I7QUFDN0JhLGNBQVFDLElBQVIsQ0FBYSxxREFBYixFQUFvRWQsR0FBcEU7QUFDQSxhQUFPLElBQVA7QUFDRDs7QUFDRFksV0FBT0EsUUFBUVosSUFBSVksSUFBWixJQUFvQixtQkFBM0I7O0FBQ0EsYUFBU0csT0FBVCxHQUFtQjtBQUNqQixhQUNFakIsV0FBV08sY0FBWCxDQUNFTCxHQURGLEVBRUVNLFdBQVcsSUFGYixFQUdFVSxTQUhGLEVBSUUsSUFKRixFQUtFSixJQUxGLENBREY7QUFTRDs7QUFFRCxXQUFPRyxPQUFQO0FBQ0Q7O0FBdERnQixDQUFuQjtBQXlEQUUsT0FBT25CLFVBQVAsR0FBb0JBLFVBQXBCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZXJyb3ItZ3VhcmRcbiAqIEBwb2x5ZmlsbFxuICogQG5vbGludFxuICovXG5cbmxldCBfaW5HdWFyZCA9IDA7XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgZXJyb3IgaGFuZGxlciB0aGF0IGlzIGNhbGxlZCB3aGVuIHdlIGVuY291bnRlciBhbiBleGNlcHRpb25cbiAqIHdoZW4gbG9hZGluZyBhIG1vZHVsZS4gVGhpcyB3aWxsIHJlcG9ydCBhbnkgZXJyb3JzIGVuY291bnRlcmVkIGJlZm9yZVxuICogRXhjZXB0aW9uc01hbmFnZXIgaXMgY29uZmlndXJlZC5cbiAqL1xubGV0IF9nbG9iYWxIYW5kbGVyID0gZnVuY3Rpb24gb25FcnJvcihlKSB7XG4gIHRocm93IGU7XG59O1xuXG4vKipcbiAqIFRoZSBwYXJ0aWN1bGFyIHJlcXVpcmUgcnVudGltZSB0aGF0IHdlIGFyZSB1c2luZyBsb29rcyBmb3IgYSBnbG9iYWxcbiAqIGBFcnJvclV0aWxzYCBvYmplY3QgYW5kIGlmIGl0IGV4aXN0cywgdGhlbiBpdCByZXF1aXJlcyBtb2R1bGVzIHdpdGggdGhlXG4gKiBlcnJvciBoYW5kbGVyIHNwZWNpZmllZCB2aWEgRXJyb3JVdGlscy5zZXRHbG9iYWxIYW5kbGVyIGJ5IGNhbGxpbmcgdGhlXG4gKiByZXF1aXJlIGZ1bmN0aW9uIHdpdGggYXBwbHlXaXRoR3VhcmQuIFNpbmNlIHRoZSByZXF1aXJlIG1vZHVsZSBpcyBsb2FkZWRcbiAqIGJlZm9yZSBhbnkgb2YgdGhlIG1vZHVsZXMsIHRoaXMgRXJyb3JVdGlscyBtdXN0IGJlIGRlZmluZWQgKGFuZCB0aGUgaGFuZGxlclxuICogc2V0KSBnbG9iYWxseSBiZWZvcmUgcmVxdWlyaW5nIGFueXRoaW5nLlxuICovXG5jb25zdCBFcnJvclV0aWxzID0ge1xuICBzZXRHbG9iYWxIYW5kbGVyKGZ1bikge1xuICAgIF9nbG9iYWxIYW5kbGVyID0gZnVuO1xuICB9LFxuICBnZXRHbG9iYWxIYW5kbGVyKCkge1xuICAgIHJldHVybiBfZ2xvYmFsSGFuZGxlcjtcbiAgfSxcbiAgcmVwb3J0RXJyb3IoZXJyb3IpIHtcbiAgICBfZ2xvYmFsSGFuZGxlciAmJiBfZ2xvYmFsSGFuZGxlcihlcnJvcik7XG4gIH0sXG4gIHJlcG9ydEZhdGFsRXJyb3IoZXJyb3IpIHtcbiAgICBfZ2xvYmFsSGFuZGxlciAmJiBfZ2xvYmFsSGFuZGxlcihlcnJvciwgdHJ1ZSk7XG4gIH0sXG4gIGFwcGx5V2l0aEd1YXJkKGZ1biwgY29udGV4dCwgYXJncykge1xuICAgIHRyeSB7XG4gICAgICBfaW5HdWFyZCsrO1xuICAgICAgcmV0dXJuIGZ1bi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBFcnJvclV0aWxzLnJlcG9ydEVycm9yKGUpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaW5HdWFyZC0tO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgYXBwbHlXaXRoR3VhcmRJZk5lZWRlZChmdW4sIGNvbnRleHQsIGFyZ3MpIHtcbiAgICBpZiAoRXJyb3JVdGlscy5pbkd1YXJkKCkpIHtcbiAgICAgIHJldHVybiBmdW4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIEVycm9yVXRpbHMuYXBwbHlXaXRoR3VhcmQoZnVuLCBjb250ZXh0LCBhcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGluR3VhcmQoKSB7XG4gICAgcmV0dXJuIF9pbkd1YXJkO1xuICB9LFxuICBndWFyZChmdW4sIG5hbWUsIGNvbnRleHQpIHtcbiAgICBpZiAodHlwZW9mIGZ1biAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKCdBIGZ1bmN0aW9uIG11c3QgYmUgcGFzc2VkIHRvIEVycm9yVXRpbHMuZ3VhcmQsIGdvdCAnLCBmdW4pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIG5hbWUgPSBuYW1lIHx8IGZ1bi5uYW1lIHx8ICc8Z2VuZXJhdGVkIGd1YXJkPic7XG4gICAgZnVuY3Rpb24gZ3VhcmRlZCgpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIEVycm9yVXRpbHMuYXBwbHlXaXRoR3VhcmQoXG4gICAgICAgICAgZnVuLFxuICAgICAgICAgIGNvbnRleHQgfHwgdGhpcyxcbiAgICAgICAgICBhcmd1bWVudHMsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBuYW1lXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGd1YXJkZWQ7XG4gIH0sXG59O1xuXG5nbG9iYWwuRXJyb3JVdGlscyA9IEVycm9yVXRpbHM7XG4iXX0=