{"version":3,"sources":["progressBar.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,8B;AACA,kD;AACA;AACA,2C;AAWA,IAAA,cAAA,aAAA,UAAA,MAAA,EAAA;AAAyC,cAAA,WAAA,EAAA,MAAA;AACvC,aAAA,WAAA,CAAY,KAAZ,EAAwB;AAAxB,YAAA,QACE,OAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,IADd;AAEE,cAAK,KAAL,GAAa;AACX,uBAAW,IAAI,sBAAS,KAAb,CAAmB,CAAnB,CADA,EAAb;;;AAGD;AAED,gBAAA,SAAA,CAAA,yBAAA,GAAA,UAA0B,SAA1B,EAA0C;AACxC,YAAI,KAAK,KAAL,CAAW,UAAX,KAA0B,UAAU,UAAxC,EAAoD;AAClD,iBAAK,OAAL,CAAa,UAAU,UAAvB;AACD;AACF,KAJD;AAMA,gBAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,UAAR,EAA0B;AACxB,YAAM,UAAU,CAAC,KAAK,KAAL,CAAW,KAAX,IAAoB,GAArB,IAA4B,UAA5C;AACA,8BAAS,MAAT,CAAgB,KAAK,KAAL,CAAW,SAA3B,EAAsC,EAAE,SAAS,OAAX,EAAoB,UAAU,GAA9B,EAAtC,EAA2E,KAA3E;AACD,KAHD;AAKA,gBAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AAAA,YAAA,QAAA,IAAA;AACE,eACE,gBAAA,aAAA,CAAC,aAAD,EAAc,IAAd;AAEE,wBAAA,aAAA,CAAC,UAAD,EAAW,EACT,UAAU,UAAA,KAAA,EAAK,CAAI,OAAA,MAAK,QAAL,CAAc,EAAE,OAAO,MAAM,WAAN,CAAkB,MAAlB,CAAvB,KAAc,EAAd,CAAA,CAAwD,CADlE,EAAX,CAFF;AAKE,wBAAA,aAAA,CAAC,sBAAS,IAAV,EAAc,EAAC,OAAO,CAAC,EAAE,OAAO,KAAK,KAAL,CAAW,SAApB,EAAD,CAAR,EAAd;AACE,wBAAA,aAAA,CAAC,QAAD,EAAS,IAAT,CADF,CALF,CADF;AAYD,KAbD;AAcF,WAAA,WAAA;AAAC,CAjCD,CAAyC,gBAAM,SAA/C,CAAA,C;;AAmCA,IAAM,gBAAgB,iBAAO,IAAP,CAAW,qBAAA,mBAAA,qBAAA,CAAA,iEAAA,CAAA,EAAA,CAAA,iEAAA,CAAA,CAAA,CAAX,CAAtB;AAMA,IAAM,aAAa,iBAAO,IAAP,CAAW,qBAAA,mBAAA,qBAAA,CAAA,gFAAA,EAAA,KAAA,CAAA,EAAA,CAAA,gFAAA,EAIQ,KAJR,CAAA,CAAA,CAAX,EAIG,eAAO,SAJV,CAAnB;AAOA,IAAM,WAAW,iBAAO,IAAP,CAAW,qBAAA,mBAAA,qBAAA,CAAA,sGAAA,EAAA,KAAA,CAAA,EAAA,CAAA,sGAAA,EAKO,KALP,CAAA,CAAA,CAAX,EAKK,eAAO,MALZ,CAAjB","sourcesContent":["import React from 'react'\nimport styled from \"styled-components/native\"\nimport { colors, lighten10l } from '../../lib/colors'\nimport { Animated } from \"react-native\"\n\nexport interface Props {\n  completion: number\n}\n\ninterface State {\n  animation: Animated.Value,\n  width?: any\n}\n\nexport default class ProgressBar extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      animation: new Animated.Value(0)\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Props) {    \n    if (this.props.completion !== nextProps.completion) {\n      this.animate(nextProps.completion)\n    }\n  }  \n\n  animate(completion: number) {\n    const toValue = (this.state.width || 0.5) * completion\n    Animated.timing(this.state.animation, { toValue: toValue, duration: 500 }).start()\n  }\n\n  render() {\n    return (\n      <ContainerView>\n        \n        <Background\n          onLayout={event => this.setState({ width: event.nativeEvent.layout.width })} />\n        \n        <Animated.View style={[{ width: this.state.animation }]}>\n          <Progress />\n        </Animated.View>\n        \n      </ContainerView>\n    )\n  }\n}\n\nconst ContainerView = styled.View`\n  flex: 8;\n  justify-content: center;\n  margin: 0px 25px;\n`;\n\nconst Background = styled.View`\n  height: 10px;\n  width: 100%;\n  border-radius: 5px;\n  background-color: ${colors.lightGray};\n`\n\nconst Progress = styled.View`\n  height: 10px;\n  margin-top: -10px;\n  width: 100%;\n  border-radius: 5px;\n  background-color: ${colors.yellow};\n`\n"],"sourceRoot":""}