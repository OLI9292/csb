{"version":3,"sources":["index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from \"styled-components/native\"\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\n\nimport { colors, lighten10l } from '../../lib/colors'\nimport Question from './Question/index'\nimport ProgressBar from './progressBar'\n\nexport interface Props {\n  questions: any[],\n  navigator: any\n}\n\ninterface State {\n  questionIndex: number,\n  questionDone: boolean\n}\n\nexport default class Game extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      questionIndex: 0,\n      questionDone: false\n    }\n  }\n\n  questionDone() {\n    this.setState({ questionDone: true })\n  }\n\n  nextQuestion() {\n    const questionIndex = this.state.questionIndex + 1\n    \n    this.setState({\n      questionIndex: questionIndex,\n      questionDone: false\n    })\n\n    if (questionIndex === this.props.questions.length) {\n      setTimeout(() => this.exitGame(), 500)\n    }\n  }\n\n  exitGame() {\n    this.props.navigator.dismissModal({\n      animationType: \"none\"\n    })\n  }\n\n  render() {\n    const {\n      questionIndex,\n      questionDone\n    } = this.state\n\n    const {\n      questions\n    } = this.props\n\n    return (\n      <ContainerView>\n        <TopContainerView>\n          <FlexedView>\n            <Icon\n              onPress={this.exitGame.bind(this)}\n              name=\"exit-to-app\"\n              size={30}\n              color={colors.lightGray} />\n          </FlexedView>\n\n          <ProgressBar\n            completion={questionIndex / questions.length} />\n\n          <FlexedView />\n        </TopContainerView>\n\n        <Question\n          isInterlude={questionDone}\n          questionDone={this.questionDone.bind(this)}\n          question={questions[questionIndex]} />\n\n        <BottomContainerView>\n          {\n            questionDone &&\n            <Button\n              underlayColor={colors.green10l}\n              onPress={this.nextQuestion.bind(this)}>\n              <Text>\n                CONTINUE\n              </Text>\n            </Button>\n          }\n        </BottomContainerView>\n      </ContainerView>\n    )\n  }\n}\n\nconst FlexedView = styled.View`\n  flex: 1;\n`\n\nconst Button = styled.TouchableHighlight`\n  width: 100px;\n  height: 40px;\n  align-items: center;\n  justify-content: center;\n  border-radius: 5px;\n  background-color: ${colors.green};\n`;\n\nconst Text = styled.Text`\n  color: white;\n  font-family: BrandonGrotesque-Bold;\n`;\n\nconst ContainerView = styled.View`\n  flex: 1;\n  align-self: stretch;\n  margin: 20px 20px 0px 20px;\n`;\n\nconst TopContainerView = styled.View`\n  flex: 1;\n  align-self: stretch;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`\n\nconst BottomContainerView = styled.View`  \n  flex: 1;\n  align-items: flex-end;\n`\n"],"sourceRoot":""}