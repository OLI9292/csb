{"version":3,"sources":["icon-button.js"],"names":["createIconButtonComponent","styles","StyleSheet","create","container","flexDirection","justifyContent","alignItems","padding","touchable","overflow","icon","marginRight","text","fontWeight","backgroundColor","IOS7_BLUE","Icon","props","style","iconStyle","children","restProps","iconProps","Object","keys","Text","propTypes","touchableProps","TouchableHighlight","colorStyle","blockStyle","PureComponent","PropTypes","oneOfType","string","number","borderRadius","color","size","any","node","defaultProps"],"mappings":";;;;;;;;kBA4BwBA,yB;;AA5BxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMC,SAASC,wBAAWC,MAAX,CAAkB;AAC/BC,aAAW;AACTC,mBAAe,KADN;AAETC,oBAAgB,YAFP;AAGTC,gBAAY,QAHH;AAITC,aAAS;AAJA,GADoB;AAO/BC,aAAW;AACTC,cAAU;AADD,GAPoB;AAU/BC,QAAM;AACJC,iBAAa;AADT,GAVyB;AAa/BC,QAAM;AACJC,gBAAY,KADR;AAEJC,qBAAiB;AAFb;AAbyB,CAAlB,CAAf;;AAmBA,IAAMC,YAAY,SAAlB;;AAEe,SAAShB,yBAAT,CAAmCiB,IAAnC,EAAyC;AAAA;;AACtD;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,+BAqBW;AAAA,qBAC8C,KAAKC,KADnD;AAAA,YACCC,KADD,UACCA,KADD;AAAA,YACQC,SADR,UACQA,SADR;AAAA,YACmBC,QADnB,UACmBA,QADnB;AAAA,YACgCC,SADhC;;AAGP,YAAMC,YAAY,oBAChBD,SADgB,EAEhBE,OAAOC,IAAP,CAAYC,kBAAKC,SAAjB,CAFgB,EAGhB,OAHgB,EAIhB,MAJgB,EAKhB,MALgB,EAMhB,OANgB,CAAlB;AAQA,YAAMC,iBAAiB,oBACrBN,SADqB,EAErBE,OAAOC,IAAP,CAAYI,gCAAmBF,SAA/B,CAFqB,CAAvB;AAIA,YAAMT,QAAQ,oBACZI,SADY,EAEZE,OAAOC,IAAP,CAAYF,SAAZ,CAFY,EAGZC,OAAOC,IAAP,CAAYG,cAAZ,CAHY,EAIZ,WAJY,EAKZ,cALY,EAMZ,iBANY,CAAd;AAQAL,kBAAUJ,KAAV,GAAkBC,YAAY,CAACnB,OAAOU,IAAR,EAAcS,SAAd,CAAZ,GAAuCnB,OAAOU,IAAhE;;AAEA,YAAMmB,aAAa,oBAAK,KAAKZ,KAAV,EAAiB,OAAjB,CAAnB;AACA,YAAMa,aAAa,oBAAK,KAAKb,KAAV,EAAiB,iBAAjB,EAAoC,cAApC,CAAnB;;AAEA,eACE;AAAC,yCAAD;AAAA;AACE,mBAAO,CAACjB,OAAOQ,SAAR,EAAmBsB,UAAnB;AADT,aAEMH,cAFN;AAIE;AAAC,6BAAD;AAAA,uBAAM,OAAO,CAAC3B,OAAOG,SAAR,EAAmB2B,UAAnB,EAA+BZ,KAA/B,CAAb,IAAwDD,KAAxD;AACE,0CAAC,IAAD,EAAUK,SAAV,CADF;AAEG,oCAASF,QAAT,IACC;AAAC,+BAAD;AAAA,gBAAM,OAAO,CAACpB,OAAOY,IAAR,EAAciB,UAAd,CAAb;AAAyCT;AAAzC,aADD,GAGCA;AALJ;AAJF,SADF;AAeD;AAhEH;;AAAA;AAAA,IAAgCW,oBAAhC,UACSL,SADT,GACqB;AACjBZ,qBAAiBkB,oBAAUC,SAAV,CAAoB,CACnCD,oBAAUE,MADyB,EAEnCF,oBAAUG,MAFyB,CAApB,CADA;AAKjBC,kBAAcJ,oBAAUG,MALP;AAMjBE,WAAOL,oBAAUC,SAAV,CAAoB,CAACD,oBAAUE,MAAX,EAAmBF,oBAAUG,MAA7B,CAApB,CANU;AAOjBG,UAAMN,oBAAUG,MAPC;AAQjBhB,eAAWa,oBAAUO,GARJ;AASjBrB,WAAOc,oBAAUO,GATA;AAUjBnB,cAAUY,oBAAUQ;AAVH,GADrB,SAcSC,YAdT,GAcwB;AACpB3B,qBAAiBC,SADG;AAEpBqB,kBAAc,CAFM;AAGpBC,WAAO,OAHa;AAIpBC,UAAM;AAJc,GAdxB;AAkED","file":"icon-button.js","sourcesContent":["import isString from 'lodash/isString';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { StyleSheet, Text, TouchableHighlight, View } from './react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    padding: 8,\n  },\n  touchable: {\n    overflow: 'hidden',\n  },\n  icon: {\n    marginRight: 10,\n  },\n  text: {\n    fontWeight: '600',\n    backgroundColor: 'transparent',\n  },\n});\n\nconst IOS7_BLUE = '#007AFF';\n\nexport default function createIconButtonComponent(Icon) {\n  return class IconButton extends PureComponent {\n    static propTypes = {\n      backgroundColor: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n      ]),\n      borderRadius: PropTypes.number,\n      color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      size: PropTypes.number,\n      iconStyle: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n      children: PropTypes.node,\n    };\n\n    static defaultProps = {\n      backgroundColor: IOS7_BLUE,\n      borderRadius: 5,\n      color: 'white',\n      size: 20,\n    };\n\n    render() {\n      const { style, iconStyle, children, ...restProps } = this.props;\n\n      const iconProps = pick(\n        restProps,\n        Object.keys(Text.propTypes),\n        'style',\n        'name',\n        'size',\n        'color'\n      );\n      const touchableProps = pick(\n        restProps,\n        Object.keys(TouchableHighlight.propTypes)\n      );\n      const props = omit(\n        restProps,\n        Object.keys(iconProps),\n        Object.keys(touchableProps),\n        'iconStyle',\n        'borderRadius',\n        'backgroundColor'\n      );\n      iconProps.style = iconStyle ? [styles.icon, iconStyle] : styles.icon;\n\n      const colorStyle = pick(this.props, 'color');\n      const blockStyle = pick(this.props, 'backgroundColor', 'borderRadius');\n\n      return (\n        <TouchableHighlight\n          style={[styles.touchable, blockStyle]}\n          {...touchableProps}\n        >\n          <View style={[styles.container, blockStyle, style]} {...props}>\n            <Icon {...iconProps} />\n            {isString(children) ? (\n              <Text style={[styles.text, colorStyle]}>{children}</Text>\n            ) : (\n              children\n            )}\n          </View>\n        </TouchableHighlight>\n      );\n    }\n  };\n}\n"]}